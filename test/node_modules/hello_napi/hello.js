const path = require('path')
const fs = require('fs')

const addon = (function () {
  const entry = (() => {
    try {
      return require.resolve('./build/Release/hello.node')
    } catch (_) {
      return require.resolve('./build/Release/hello.wasm')
    }
  })()
  
  const ext = path.extname(entry)
  if (ext === '.node') {
    return require(entry)
  }

  const emnapi = require('@emnapi/runtime')
  if (ext === '.js') {
    return require(entry)().emnapiInit({
      context: emnapi.getDefaultContext()
    })
  }

  if (ext === '.wasm') {
    const { instantiateNapiModuleSync } = require('@emnapi/core')
    const { napiModule } = instantiateNapiModuleSync(fs.readFileSync(entry), {
      context: emnapi.getDefaultContext(),
      wasi: new (require('wasi').WASI)({ version: 'preview1' }),
      asyncWorkPoolSize: process.env.UV_THREADPOOL_SIZE || 4,
      overwriteImports (imports) {
        imports.env.memory = new WebAssembly.Memory({
          initial: 16777216 / 65536,
          maximum: 2147483648 / 65536,
          shared: true
        })
      },
      onCreateWorker () {
        return new (require('worker_threads').Worker)(path.join(__dirname, './worker.js'), {
          env: process.env,
          execArgv: ['--experimental-wasi-unstable-preview1']
        })
      }
    })
    return napiModule.exports
  }
  throw new Error('Failed to initialize Node-API wasm module')
})()

exports.hello = function() { return addon.hello() }
