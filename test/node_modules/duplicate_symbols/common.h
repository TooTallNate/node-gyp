#ifndef DUPLICATE_SYMBOLS_COMMON_H_
#define DUPLICATE_SYMBOLS_COMMON_H_

#include <nan.h>

class Something {
 public:
  static void PointerCheck(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

// Removing the inline keyword below will result in the addon failing to link
// on OSX because of a duplicate symbol.
inline void
Something::PointerCheck(const Nan::FunctionCallbackInfo<v8::Value>& info) {
  v8::Local<v8::Value> v8result;

  if (info.Length() > 0) {
    // If an argument was passed in, it is a pointer to the `PointerCheck`
    // method from the other addon. So, we compare it to the value of the
    // pointer to the `PointerCheck` method in this addon, and return
    // `"equal"` if they are equal, and `"not equal"` otherwise".

    const char* result =
      (reinterpret_cast<void*>(Something::PointerCheck) ==
          info[0].As<v8::External>()->Value()) ?
              "equal" : "not equal";
    v8result = Nan::New(result).ToLocalChecked();
  } else {
    // If no argument was passed in, we wrap the pointer to the `PointerCheck`
    // method in this addon into a `v8::External` and pass it into JavaScript.
    v8result = Nan::New<v8::External>(
        reinterpret_cast<void*>(Something::PointerCheck));
  }
  info.GetReturnValue().Set(v8result);
}

#endif  // DUPLICATE_SYMBOLS_COMMON_H_
